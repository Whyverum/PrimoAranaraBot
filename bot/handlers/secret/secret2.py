from asyncio import sleep
from typing import Dict, Any

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, FSInputFile
from aiogram.utils.markdown import hide_link

from configs import ID_TO_ROLE

router: Router = Router()


class KnowledgeStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    question1: State = State()
    question2: State = State()
    question3: State = State()
    question4: State = State()
    question5: State = State()
    question6: State = State()

class Secret2(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∞—Ö–∞"""
    name: State = State()
    result: State = State()



QUESTIONS: Dict[int, str] = {
    1: "–ù–∞—á–Ω–µ–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ. –£—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∞–Ω—Ç–∏-–º–∞–≥–∏—á–µ—Å–∫–æ–π —Å—Ç–∞–ª–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —É–≥–ª–µ—Ä–æ–¥–Ω–æ-–Ω–∏–∫–∏–ª–∏–µ–≤–æ–π –¥–æ–±–∞–≤–∫–∏?",
    2: "–ö–∞–∫ –∑–æ–≤—É—Ç –º–∞–ª—ã—à–∫—É, —á—Ç–æ –æ–±–∏—Ç–∞–µ—Ç –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –î–æ—Ç—Ç–æ—Ä–µ?",
    3: "–ö–∞–∫–æ–µ –±–ª—é–¥–æ –º—ã, –∞—Ä–∞–Ω–∞—Ä—ã, –ª—é–±–∏–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ? –¢—ã —Ç–æ –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –Ω–∞–≤–µ—Ä–Ω—è–∫–∞!",
    4: "–ì–æ—Å–ø–æ–¥–∏–Ω –≤—Å–µ –≤—Ä–µ–º—è, —á—Ç–æ-—Ç–æ —Ä–∏—Å—É–µ—Ç –Ω–∞ —á–µ—Ä—Ç–µ–∂–µ, –Ω–æ –¥–ª—è —á–µ–≥–æ..? –ö–∞–∫–æ–≤ –ï–≥–æ —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥?",
    5: "–ë—Ä–æ—à—å –î–æ—Ç—Ç–æ—Ä–µ —É–∂–∞—Å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞‚Ä¶ –ê –≤ —á–µ–º –µ—ë –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å? –ö–∞–∫ –æ–Ω–∞ —Å–¥–µ–ª–∞–Ω–∞?",
    6: "–ß—Ç–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –¥–ª—è —Ç–µ–±—è, –¥–æ—Ä–æ–≥–æ–π –î—Ä—É–≥?"
}

ANSWERS: Dict[int, Dict[str, str]] = {
    1: {"96h-69ctg30x": "–í–µ—Ä–Ω–æ! –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è –õ–æ–≥–æ—Å—Å–∫–æ–π –≠–∫–∫–ª–µ—Å–∏–∏, –≤—Ä–æ–¥–µ –±—ã...", "2x+3": "–ö—Ö–º.. –ö–∞–∂–µ—Ç—Å—è –≤—Å–µ –≤ –øÕ†ÃÑ–æÃ©Ã∂—ÄÕÅÕ´—èÃ¶Ãö–¥–∫–µ? –ü—Ä–æ–¥–æ–ª–∂–∏–º!"},
    2: {"–≠–º–∏–ª–∏—è": "–≠–º–∏–ª–∏—è! –≠–º–∏! –û—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è! –Ø –ø–æ–º–Ω—é —ç—Ç—É –º–∞–ª—ã—à–∫—É, –µ—ë –ø—Ä–∏–Ω–µ—Å –î–æ—Ç—Ç–æ—Ä–µ –≤ –∫—Ä–æ‚Äî", "–£–±–∏–π—Ü–∞": "–ùÕûÃ±–µÕÅÃá—ÇÃÜÕù.. –ØÕîÕÅ –ΩÃ¥Õ´–µÕ¢Ãë —ÖÃßÕ¨–æÕ°Õ§—ÇÃßÃå–µÕ≠Ã°–ªÕûÃÇ.."},
    3: {"–°–ª–∞–¥–æ—Å—Ç–∏": "–î–ê! –Ø –û–ë–û–ñ–ê–Æ –°–õ–ê–î–û–°–¢–ò! –Ø —Å–æ—Å—Ç–æ—é –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 26% –∏–∑ –≥–ª—é–∫–æ–∑—ã! –•–µ-—Ö–µ-—Ö–µ!", "–ë–µ–¥—Ä–µ–Ω–Ω–∞—è –∫–æ—Å—Ç—å": "–ûÕôÃÉ—ÇÃªÕ•—áÕçÃ∫–µÃõÕì—ÇÕÉÃú #77. –üÃèÕò–æÃÆÕß—ÅÃ∏Ã™–ªÕ°Õî–µÃõÃÑ —ÅÃÑÕà–ªÕùÕ•–æÃ≤Ã¢–ºÃáÃÆ–∞Ã§Ã°–ΩÃ¨Õú–ΩÕÄÕô—ãÕÅÕì—ÖÃ∏Ã≠ –∫ÕíÕ°–æÃÜÃå—ÅÃüÃ¥—ÇÃØÕí–µÕòÃ±–πÃòÕò –øÃèÃï—ÄÃµÕÇ–∏ÕòÃâ—àÃôÃò–µÃ∏Ãæ–ªÃ∞Õ¢ –æÕÖÕ≠–ΩÃΩÕ¢."},
    4: {"–ë—Ä–æ–Ω—è": "–ë—Ä–æ–Ω—è? –ê—Ä–∏ –¥—É–º–∞–ª —ç—Ç–æ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è –ø–∏–∂–∞–º–∞ –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫—É.. –ü–æ—á–µ–º—É –≤—Å–µ —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ–æ–æ?(", "F5:–°8": "–öÕÄÃªÃª—ÉÕ•ÃßÃ∫–ªÃØÕöÃΩ—åÕ•ÕÄÃá—ÇÃ¥ÕàÃµ –≤ÃùÃ≤Ã°—ÅÕÇÕìÃ¶–µÕíÕÄÃú –±ÕÆÃÇÃû–ªÕûÃùÃ°–∏ÃâÕ¢Õ®–∂Õ≠Ã≤Ãï–µÕàÃ°ÃΩ. –ûÃΩÕòÕê–ΩÕÄÕïÕü–∏Õ≠Ã∂ —ÅÃ∏Õ†ÕÜ–∫ÕÉÃ§Ãµ–æÃ∫ÕäÕî—ÄÕ™Ã¥Õô–æÕÖÃïÕ§ –ΩÕ†ÃòÃñ–∞Õ¢Ã≤–πÕüÕùÃù–¥ÕòÃ†ÕØ—ÉÃïÕöÕå—ÇÕØÃ™Ãº –ºÕ¢ÕúÃã–µÕöÕÄÃç–ΩÕ®ÃÑÃï—èÃµÃ±. –ØÕ¶ÕöÃ∑ –∑ÕòÃâÃõ–ΩÃ´Õ¢ÕÖ–∞Ã¶Ã∑Õí—éÕØÕ®. –ùÕ≠Õ†Ãµ—ÉÃØÃ∂Õñ–∂ÕØÃáÃ¢–ΩÃúÃÅ–æÃèÃúÃ∏ —ÉÕúÃûÃæ—ÅÕãÃ±ÕÅ—ÇÃÆÕ¢Ãö–∞ÃëÃúÃ∫–ΩÕïÃ®Õä–æÃµÕÖÃã–≤ÃÑÃõÃâ–∏ÃõÃÖÃú—ÇÃÜÕãÕë—åÕêÕ•Ã¢ —ÄÃ¢ÃèÃº–∞Ã†Õ≠ÕÄ—ÅÃûÕúÕ§—ÇÃûÕúÃ¶—èÕüÕôÃë–∂Ã©ÃµÃñ–∫ÕúÃ©Ãö—ÉÕ£Ã©Ã∑ –ΩÃ®ÕÑÃΩ–∞ÕüÕïÕÆ –¥ÕûÃõÃ¨–≤ÕßÃ•Õ´–µÃòÕØÃï—ÄÃ†ÕñÃç–∏ÕïÕÅÕé.."},
    5: {"–ê—É–≥–º–µ–Ω—Ç—É–º": "–í–µ—Ä–Ω–æ! –í–Ω—É—Ç—Ä–∏ –±—Ä–æ—à–∏ –î–æ—Ç—Ç–æ—Ä–µ, —Ü–µ–ª–∞—è –∫–∞—Ä–º–∞–Ω–Ω–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è!", "–°–µ—Ä—ã–π": "–†ÃüÕÄ—ÉÃ†Ã´–ΩÃ∏Ã∂–∏Ã∂Ãá—áÃêÕí–µÕúÕé—ÅÃûÃ°–∫Ã¶Ãâ–∞Ã∂Õö—èÃôÃ§ –ºÃüÃè–∞Ã®Ãè—ÇÕïÕã—ÄÃûÕ•–∏ÃµÃú—ÜÕÄÕì–∞Õ†Ã∂.. –ßÕïÕï–µÃàÕî—ÄÕ™Ãâ—ÇÃÑÃï."},
    6: {"": "–î–ª—è –º–µ–Ω—è —ç—Ç–æ —Ç–æ–∂–µ –≤–∞–∂–Ω–æ!", "–ò—Å—Ç–∏–Ω–∞": "–îÃ∫Ãé–æÕ†Ã¶–±ÕÄÕñ—ÄÕ®Õû–æÃ¢Õù –øÕéÃï–æÃ©ÕØ–∂ÕòÕô–∞Ã†Õì–ªÃ∏Õà–æÃóÕü–≤ÕÄÕñ–∞Õ´Ã∏—ÇÃèÃ∞—åÕØÕ†! –îÃ∑Ãñ—ÄÕùÃÇ—ÉÕ®ÕÅ–∑Ã°Õì—åÃºÕê—èÕ°ÕÑ!"}
}


@router.message(StateFilter(None), Command("–∑–Ω–∞–Ω–∏—è"))
@router.message(StateFilter(None), F.text.casefold() == "–ø–æ—Ä–∞ –∑–∞–Ω—è—Ç—å—Å—è –∑–Ω–∞–Ω–∏—è–º–∏")
async def start_knowledge_session(message: Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ –∑–Ω–∞–Ω–∏–π"""
    await message.answer("""
–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é –∑–Ω–∞–Ω–∏–π! üß†
–Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã, –∞ –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–∏—Ö!
""")
    await message.reply(QUESTIONS[1])
    await state.set_state(KnowledgeStates.question1)
    await state.update_data(answers={})


async def save_answer(
    state: FSMContext, question_key: str, user_answer: str, correct_option: str
) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç (1 ‚Äî –ø–µ—Ä–≤—ã–π —Ç–∏–ø, 2 ‚Äî –≤—Ç–æ—Ä–æ–π —Ç–∏–ø)"""
    answer_code: int = 1 if user_answer == correct_option else 2
    data: Dict[str, Any] = await state.get_data()
    answers: Dict[str, int] = data.get("answers", {})
    answers[question_key] = answer_code
    await state.update_data(answers=answers)


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–û–ü–†–û–°–û–í ====================

@router.message(KnowledgeStates.question1, F.text.in_(ANSWERS[1].keys()))
async def process_question1(message: Message, state: FSMContext) -> None:
    await save_answer(state, "q1", message.text, "96h-69")
    await message.reply(f"{ANSWERS[1][message.text]}\n\n<blockquote>{QUESTIONS[2]}</blockquote>")
    await state.set_state(KnowledgeStates.question2)


@router.message(KnowledgeStates.question2, F.text.in_(ANSWERS[2].keys()))
async def process_question2(message: Message, state: FSMContext) -> None:
    await save_answer(state, "q2", message.text, "–ê–ª–∏—Å–∞")
    await message.reply(f"{ANSWERS[2][message.text]}\n\n<blockquote>{QUESTIONS[3]}</blockquote>")
    await state.set_state(KnowledgeStates.question3)


@router.message(KnowledgeStates.question3, F.text.in_(ANSWERS[3].keys()))
async def process_question3(message: Message, state: FSMContext) -> None:
    await save_answer(state, "q3", message.text, "–°–ª–∞–¥–æ—Å—Ç–∏")
    await message.reply(f"{ANSWERS[3][message.text]}\n\n<blockquote>{QUESTIONS[4]}</blockquote>")
    await state.set_state(KnowledgeStates.question4)


@router.message(KnowledgeStates.question4, F.text.in_(ANSWERS[4].keys()))
async def process_question4(message: Message, state: FSMContext) -> None:
    await save_answer(state, "q4", message.text, "---")
    await message.reply(f"{ANSWERS[4][message.text]}\n\n<blockquote>{QUESTIONS[5]}</blockquote>")
    await state.set_state(KnowledgeStates.question5)


@router.message(KnowledgeStates.question5, F.text.in_(ANSWERS[5].keys()))
async def process_question5(message: Message, state: FSMContext) -> None:
    await save_answer(state, "q5", message.text, "–ê—É–≥–º–µ–Ω—Ç—É–º")
    await message.reply(f"{ANSWERS[5][message.text]}\n\n<blockquote>{QUESTIONS[6]}</blockquote>")
    await state.set_state(KnowledgeStates.question6)


@router.message(KnowledgeStates.question6)
async def process_question6(message: Message, state: FSMContext) -> None:
    user_answer: str = message.text

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏–∫—É: "–ò—Å—Ç–∏–Ω–∞" ‚Üí –≤—Ç–æ—Ä–æ–π —Ç–∏–ø, –∏–Ω–∞—á–µ ‚Üí –ø–µ—Ä–≤—ã–π —Ç–∏–ø
    if user_answer == "–ò—Å—Ç–∏–Ω–∞":
        answer_code: int = 2
        response_message: str = ANSWERS[6]["–ò—Å—Ç–∏–Ω–∞"]
    else:
        answer_code: int = 1
        # –î–ª—è –ª—é–±–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∫—Ä–æ–º–µ "–ò—Å—Ç–∏–Ω–∞" –≤—ã–≤–æ–¥–∏–º –ª–∏–±–æ –∑–∞–≥–æ—Ç–æ–≤–∫—É, –ª–∏–±–æ —Å–∞–º —Ç–µ–∫—Å—Ç
        response_message: str = ANSWERS[6].get("–ú–∏—Ä", f"–¢—ã –ø—Ä–∞–≤! –¢—ã‚Äî‚Äî‚Äî")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    data = await state.get_data()
    answers = data.get("answers", {})
    answers["q6"] = answer_code
    await state.update_data(answers=answers)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
    await message.reply(response_message)
    await finish_knowledge_session(message, state)



# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ï–í–ï–†–ù–´–• –û–¢–í–ï–¢–û–í ====================

@router.message(StateFilter(
KnowledgeStates.question1,
    KnowledgeStates.question2,
    KnowledgeStates.question3,
    KnowledgeStates.question4,
    KnowledgeStates.question5,
    KnowledgeStates.question6,
))
async def process_incorrect_answer(message: Message, state: FSMContext) -> None:
    """–û—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω –≤–≤—ë–ª —á—Ç–æ-—Ç–æ –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    current_state: str = (await state.get_state()).split(":")[-1]

    question_number: int = {
        "question1": 1,
        "question2": 2,
        "question3": 3,
        "question4": 4,
        "question5": 5,
        "question6": 6,
    }[current_state]

    await message.reply(
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.\n\n<blockquote>{QUESTIONS[question_number]}</blockquote>"
    )


# ==================== –ó–ê–í–ï–†–®–ï–ù–ò–ï ====================
# ------------------- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∑–Ω–∞–Ω–∏–π -------------------
@router.message(Command("secret2676"))

async def finish_knowledge_session(message: Message, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –∑–Ω–∞–Ω–∏–π"""
    data: Dict[str, Any] = await state.get_data()
    answers: Dict[str, int] = data.get("answers", {})

    if all(answer == 2 for answer in answers.values()):
        await message.answer(
            f"""{hide_link("https://i.pinimg.com/originals/e0/ab/f7/e0abf78d8a8eba5fa8ae9cb7b9b1c410.gif")}
        –î·¥Ä ô–Ω·¥è‚Ä¶ ·¥Ñ·¥ß–∏…Ø·¥ã·¥è ç –¥·¥Ä ô–Ω·¥è  ç—ã –Ω·¥á  ô·¥Ñ·¥õ·¥©·¥á—á·¥Ä·¥ß–∏·¥Ñ—å, –ù·¥Ä–±·¥ß—é–¥·¥Ä·¥õ·¥á·¥ß—å.
        –¢ ô·¥è–∏ ·¥¶·¥ß·¥Ä…ú·¥Ä‚Ä¶ ·¥è–Ω–∏ ·¥Ñ·¥ß·¥á–¥—è·¥õ …ú·¥Ä  ç–Ω·¥è–π ·¥Ñ·¥ã ô·¥è…ú—å ·¥õ—å ç—É, –Ω·¥á  ç–∏·¥¶·¥Ä—è.
        –°·¥ã·¥Ä–∂–∏‚Ä¶ ·¥Ñ·¥ã·¥Ä–∂–∏ —Ö·¥è·¥õ—è –±—ã ·¥Ñ ô·¥è—ë –∏ ç—è‚Ä¶ ·¥®·¥©·¥á–∂–¥·¥á —á·¥á ç ·¥õ—å ç·¥Ä ·¥®·¥©·¥è·¥¶·¥ß·¥è·¥õ–∏·¥õ –Ω·¥Ä·¥Ñ ·¥è·¥ã·¥è–Ω—á·¥Ä·¥õ·¥á·¥ß—å–Ω·¥è.
        """
        )
        await state.set_state(Secret2.name)
    else:
        await message.reply_photo(photo=FSInputFile("assets/arsenal_secret2.jpeg"),
        caption="""
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
<i>‚Ä¶–û—Ç —Ç–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–∞–∂–µ —Ç–µ–Ω–∏. –ù–∏–∫–∞–∫–∏—Ö —Å–ª–µ–¥–æ–≤, —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç–æ—Ç–∞, —Å–ª–æ–≤–Ω–æ –∏—Ö –ø–æ–≥–ª–æ—Ç–∏–ª–∞ —Å–∞–º–∞ —Ç—å–º–∞.
–ù–æ —Å–∫–∞–Ω–µ—Ä‚Ä¶ —Å–∫–∞–Ω–µ—Ä –≤—ã–¥–∞–ª —Å—Ç—Ä–∞–Ω–Ω—ã–µ, —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ù–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã‚Ä¶ –≤—ã–≤–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ª—É—á—à–µ –±—ã –æ—Å—Ç–∞–ª–∏—Å—å —Ç–∞–π–Ω–æ–π.

–¢—Ä—ë—Ö–¥–Ω–µ–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –û–º—É—Ç–∞‚Ä¶ –æ–Ω–∏ —Å–ª–æ–≤–Ω–æ —à–µ–ø—á—É—Ç —Å–∫–≤–æ–∑—å —Ü–∏—Ñ—Ä–æ–≤–æ–π —à—É–º. –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—Ä–∞–∂–µ–Ω–∏–µ‚Ä¶ –µ—Å–ª–∏ —Ä–∏—Å–∫–Ω—É—Ç—å‚Ä¶ —è —Å–º–æ–≥—É –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ö–∞–æ—Å –≤ –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.

–ù–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞. –°–≤–µ–∂–∏–µ –ª—é–¥–∏‚Ä¶ –Ω–∞ —á—å–∏—Ö –ø–ª–µ—á–∞—Ö –º–æ–∂–µ—Ç –ª–µ—á—å —ç—Ç–∞ —Ç—å–º–∞. –ü—Ä–∏–¥—ë—Ç—Å—è‚Ä¶ –Ω–∞–π—Ç–∏ –∏—Ö. –ò –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.</i>
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
        """)
    await state.clear()

# ------------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ -------------------
@router.message(StateFilter(Secret2.name))
async def hard_secret_name(message: Message, state: FSMContext) -> None:
    user_id: int = message.from_user.id
    text: str = message.text.strip()

    expected_role: str = ID_TO_ROLE.get(user_id)

    if expected_role is None:
        await message.reply("–¢—ã –Ω–µ –∑–Ω–∞—á–∏—à—å –Ω–∏—á–µ–≥–æ –¥–ª—è —ç—Ç–æ–π —Ç–∞–π–Ω—ã‚Ä¶")
        await state.clear()
        return

    if text.lower() == expected_role.lower():
        await message.reply(f"""{hide_link("https://i.pinimg.com/originals/d3/ae/62/d3ae62df6150066abc4f814d06070033.gif")}
–ö—Ö ç.. –ó–Ω·¥Ä—á–∏·¥õ ·¥õ—ã <b>{expected_role}</b>? –ò–Ω·¥õ·¥á·¥©·¥á·¥Ñ–Ω·¥è·¥á –∏ ç—è, –Ω·¥è –Ω·¥Ä·¥Ñ·¥õ·¥è—è—â·¥á·¥á ·¥ß–∏ ·¥è–Ω·¥è? –ß·¥õ·¥è –∂, œ∂·¥õ·¥è –Ω·¥á  ô·¥Ä–∂–Ω·¥è, ·¥Ñ·¥ã·¥Ä–∂–∏  ç–Ω·¥á <b>{expected_role}</b>, —á·¥õ·¥è –∂·¥á ·¥õ—ã  ô—ã–±·¥©·¥Ä·¥ß –±—ã?
–£–±–∏·¥õ—å –¥·¥á ô·¥è—á·¥ã—É, ·¥©·¥Ä–¥–∏  ç–∏·¥©·¥Ä
–ò·¥ß–∏ —É–±–∏·¥õ—å  ç–∏·¥©, ·¥©·¥Ä–¥–∏ –¥·¥á ô—É…Ø·¥ã–∏?
""")
    else:
        await message.reply(f"""{hide_link("https://i.pinimg.com/originals/a8/a5/a2/a8a5a29dd1613a48ef0a680e19973ff6.gif")}
–ù·¥á·¥õ, œ∂·¥õ·¥è –Ω·¥á ·¥õ—ã. –¢ ô·¥è·¥á –Ω·¥Ä·¥Ñ·¥õ·¥è—è—â·¥á·¥á –∏ ç—è <b>{expected_role}</b>. –¢—ã  ç–Ω·¥á  ô–Ω·¥è ô—å ·¥Ñ·¥è ô·¥©·¥Ä·¥ß. –ò–Ω·¥õ·¥á·¥©·¥á·¥Ñ–Ω·¥è, —á·¥õ·¥è ·¥õ·¥á–±—è ·¥®·¥è–±—É–¥–∏·¥ß·¥è. –ù·¥è œ∂·¥õ·¥è –Ω·¥á  ô·¥Ä–∂–Ω·¥è, ·¥Ñ·¥ã·¥Ä–∂–∏  ç–Ω·¥á <b>{expected_role}</b>, —á·¥õ·¥è –∂·¥á ·¥õ—ã  ô—ã–±·¥©·¥Ä·¥ß –±—ã?
–£–±–∏·¥õ—å –¥·¥á ô·¥è—á·¥ã—É, ·¥©·¥Ä–¥–∏  ç–∏·¥©·¥Ä
–ò·¥ß–∏ —É–±–∏·¥õ—å  ç–∏·¥©, ·¥©·¥Ä–¥–∏ –¥·¥á ô—É…Ø·¥ã–∏?
""")
    await state.update_data(role=expected_role)
    await state.set_state(Secret2.result)


# ------------------- –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç -------------------
@router.message(StateFilter(Secret2.result))
async def secret2_result(message: Message, state: FSMContext) -> None:
    await message.reply(f"–Ø …ú·¥Ä·¥®·¥è ç–Ω—é —Ç–≤–æ–π –æ—Ç–≤–µ—Ç.")
    await sleep(120)
    await message.reply("<b>–ß—É–∂–æ–π –º–∏—Ä–∞ —Å–µ–≥–æ.</b>")
    await state.clear()