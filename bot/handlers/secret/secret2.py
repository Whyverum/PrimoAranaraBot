from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
knowledge_router = Router()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class KnowledgeStates(StatesGroup):
    question1 = State()
    question2 = State()
    question3 = State()
    question4 = State()
    question5 = State()
    question6 = State()


# –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
QUESTIONS = {
    1: "–í–æ–ø—Ä–æ—Å1",
    2: "–í–æ–ø—Ä–æ—Å2",
    3: "–í–æ–ø—Ä–æ—Å3",
    4: "–í–æ–ø—Ä–æ—Å4",
    5: "–í–æ–ø—Ä–æ—Å5",
    6: "–í–æ–ø—Ä–æ—Å6"
}

ANSWERS = {
    1: {"–û—Ç–≤–µ—Ç 11": "–°–æ–æ–±—â–µ–Ω–∏–µ–ê1", "–û—Ç–≤–µ—Ç 12": "–°–æ–æ–±—â–µ–Ω–∏–µ–ë1"},
    2: {"–û—Ç–≤–µ—Ç 21": "–°–æ–æ–±—â–µ–Ω–∏–µ–ê2", "–û—Ç–≤–µ—Ç 22": "–°–æ–æ–±—â–µ–Ω–∏–µ–ë2"},
    3: {"–û—Ç–≤–µ—Ç 31": "–°–æ–æ–±—â–µ–Ω–∏–µ–ê3", "–û—Ç–≤–µ—Ç 32": "–°–æ–æ–±—â–µ–Ω–∏–µ–ë3"},
    4: {"–û—Ç–≤–µ—Ç 41": "–°–æ–æ–±—â–µ–Ω–∏–µ–ê4", "–û—Ç–≤–µ—Ç 42": "–°–æ–æ–±—â–µ–Ω–∏–µ–ë4"},
    5: {"–û—Ç–≤–µ—Ç 51": "–°–æ–æ–±—â–µ–Ω–∏–µ–ê5", "–û—Ç–≤–µ—Ç 52": "–°–æ–æ–±—â–µ–Ω–∏–µ–ë5"},
    6: {"–û—Ç–≤–µ—Ç 61": "–°–æ–æ–±—â–µ–Ω–∏–µ–ê6", "–û—Ç–≤–µ—Ç 62": "–°–æ–æ–±—â–µ–Ω–∏–µ–ë6"}
}

FINAL_MESSAGES = {
    "all_1": "–ò–¢–û–ì1 - –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–ø–∞!",
    "all_2": "–ò–¢–û–ì2 - –í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ —Ç–∏–ø–∞!",
    "mixed": "–ò–¢–û–ì1 - –°–º–µ—à–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã!"
}


# –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ –∑–Ω–∞–Ω–∏–π
@knowledge_router.message(StateFilter(None), Command("–∑–Ω–∞–Ω–∏—è"))
@knowledge_router.message(StateFilter(None), F.text.casefold() == "–ø–æ—Ä–∞ –∑–∞–Ω—è—Ç—å—Å—è –∑–Ω–∞–Ω–∏—è–º–∏")
async def start_knowledge_session(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é –∑–Ω–∞–Ω–∏–π! üß†")
    await message.answer(QUESTIONS[1])
    await state.set_state(KnowledgeStates.question1)
    await state.update_data(answers={})


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@knowledge_router.message(KnowledgeStates.question1, F.text.in_(ANSWERS[1].keys()))
async def process_question1(message: Message, state: FSMContext):
    user_answer = message.text
    response_message = ANSWERS[1][user_answer]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answer_code = 1 if user_answer == "–û—Ç–≤–µ—Ç 11" else 2
    await state.update_data(answers={"q1": answer_code})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await message.answer(response_message + "\n\n" + QUESTIONS[2])
    await state.set_state(KnowledgeStates.question2)


@knowledge_router.message(KnowledgeStates.question2, F.text.in_(ANSWERS[2].keys()))
async def process_question2(message: Message, state: FSMContext):
    user_answer = message.text
    response_message = ANSWERS[2][user_answer]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answer_code = 1 if user_answer == "–û—Ç–≤–µ—Ç 21" else 2
    data = await state.get_data()
    answers = data.get("answers", {})
    answers["q2"] = answer_code
    await state.update_data(answers=answers)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await message.answer(response_message + "\n\n" + QUESTIONS[3])
    await state.set_state(KnowledgeStates.question3)


# –î–æ–±–∞–≤—å—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è question3-question5

@knowledge_router.message(KnowledgeStates.question6, F.text.in_(ANSWERS[6].keys()))
async def process_question6(message: Message, state: FSMContext):
    user_answer = message.text
    response_message = ANSWERS[6][user_answer]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answer_code = 1 if user_answer == "–û—Ç–≤–µ—Ç 61" else 2
    data = await state.get_data()
    answers = data.get("answers", {})
    answers["q6"] = answer_code
    await state.update_data(answers=answers)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(response_message)
    await finish_knowledge_session(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
@knowledge_router.message(KnowledgeStates.question1)
async def process_incorrect_answer1(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.")
    await message.answer(QUESTIONS[1])


@knowledge_router.message(KnowledgeStates.question2)
async def process_incorrect_answer2(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.")
    await message.answer(QUESTIONS[2])


# –î–æ–±–∞–≤—å—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
async def finish_knowledge_session(message: Message, state: FSMContext):
    data = await state.get_data()
    answers = data.get("answers", {})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if all(answer == 2 for answer in answers.values()):
        await message.answer(FINAL_MESSAGES["all_2"])
    else:
        await message.answer(FINAL_MESSAGES["mixed"])

    await state.clear()
